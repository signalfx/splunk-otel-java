import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

plugins {
    id("com.github.johnrengelman.shadow") version "6.1.0"
}

apply from: "$rootDir/gradle/shadow.gradle"

def relocatePackages = ext.relocatePackages

configurations {
    // dependencies that are moved to inst
    customShadow
    // dependencies that need package relocation
    customShadowInclude
    // dependencies that are not moved to inst and don't need package relocation
    mainShadow
    compileOnly.extendsFrom(mainShadow)
}
dependencies {
    customShadow project(path: ":custom", configuration: "shadow")
    customShadow project(path: ":instrumentation", configuration: "shadow")
    mainShadow "io.opentelemetry.javaagent:opentelemetry-javaagent:${versions.opentelemetryJavaagent}:all"
    customShadowInclude project(":bootstrap")
}

archivesBaseName = "splunk-otel-javaagent"

compileJava {
    options.release.set(8)
}

CopySpec isolateSpec() {
    return copySpec {
        configurations.customShadow.files.each {
            from(zipTree(it)) {
                into("inst")
                rename("(^.*)\\.class\$", "\$1.classdata")
            }
        }
    }
}

// includes everything except otel agent
task customShadow(type: ShadowJar) {
    from sourceSets.main.output

    configurations = [project.configurations.customShadowInclude]

    dependsOn ':custom:shadowJar'
    dependsOn ':instrumentation:shadowJar'
    dependsOn ':bootstrap:jar'
    with isolateSpec()

    mergeServiceFiles()
    exclude("**/module-info.class")

    relocatePackages(it)
}

tasks {
    // merge otel agent with our agent
    shadowJar {
        from project.configurations.mainShadow.files
        from tasks.customShadow.outputs

        mergeServiceFiles {
            include("inst/META-INF/services/*")
        }

        manifest {
            attributes.put("Main-Class", "io.opentelemetry.javaagent.OpenTelemetryAgent")
            attributes.put("Agent-Class", "com.splunk.opentelemetry.SplunkAgent")
            attributes.put("Premain-Class", "com.splunk.opentelemetry.SplunkAgent")
            attributes.put("Can-Redefine-Classes", "true")
            attributes.put("Can-Retransform-Classes", "true")
            attributes.put("Implementation-Vendor", "Splunk")
            attributes.put("Implementation-Version", "splunk-${project.version}-otel-${versions["opentelemetryJavaagent"]}")
        }
    }

    assemble {
        dependsOn(shadowJar)
    }
}