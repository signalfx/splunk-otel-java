import nebula.plugin.release.git.opinion.Strategies

plugins {
  id "java"
  id "com.diffplug.spotless" apply false
  id "nebula.release"
  id "io.github.gradle-nexus.publish-plugin"
  id("io.spring.dependency-management")
}

release {
  defaultVersionStrategy = Strategies.SNAPSHOT
}

nebulaRelease {
  addReleaseBranchPattern(/v\d+\.\d+\.x/)
}

nexusPublishing {
  packageGroup = "com.splunk"

  repositories {
    sonatype {
      username = System.getenv('SONATYPE_USERNAME')
      password = System.getenv('SONATYPE_PASSWORD')
    }
  }
}

group = "com.splunk"

boolean snapshot = findProperty("snapshot") == 'yes'
def otelVersion = snapshot ? "1.4.0-SNAPSHOT" : "1.3.0"
def otelAlphaVersion = snapshot ? "1.4.0-alpha-SNAPSHOT" : "1.3.0-alpha"
def otelInstrumentationVersion = snapshot ? "1.4.0-SNAPSHOT" : "1.3.0"
def otelInstrumentationAlphaVersion = snapshot ? "1.4.0-alpha-SNAPSHOT" : "1.3.0-alpha"

// dependencyManagement can't into qualifiers, we have to pass version the old way for deps with qualifiers
ext.otelInstrumentationVersion = otelInstrumentationVersion
ext.otelInstrumentationAlphaVersion = otelInstrumentationAlphaVersion

subprojects {
  version = rootProject.version

  apply plugin: 'java'
  apply plugin: 'com.diffplug.spotless'
  apply plugin: "io.spring.dependency-management"
  apply from: "$rootDir/gradle/spotless.gradle"

  repositories {
    mavenCentral()
    mavenLocal()
    maven {
      url = uri("https://oss.sonatype.org/content/repositories/snapshots")
    }
  }

  dependencyManagement {
    dependencies {
      dependency("com.google.auto.service:auto-service:1.0-rc7")
      dependency("com.squareup.okhttp3:okhttp:3.12.12")
      dependency("org.assertj:assertj-core:3.19.0")
      dependency("org.awaitility:awaitility:4.0.3")
      dependency("org.slf4j:slf4j-api:1.7.30")
      dependency("org.testcontainers:testcontainers:1.15.3")

      dependencySet("com.github.docker-java:3.2.11") {
        entry("docker-java-core")
        entry("docker-java-transport-httpclient5")
      }
      dependencySet("org.mockito:3.8.0") {
        entry("mockito-core")
        entry("mockito-junit-jupiter")
      }
      dependencySet("com.google.protobuf:3.17.3") {
        entry("protobuf-java")
        entry("protobuf-java-util")
      }

      // otel-java-instrumentation
      dependency("io.opentelemetry.instrumentation:opentelemetry-instrumentation-api:${otelInstrumentationAlphaVersion}")
      dependencySet("io.opentelemetry.javaagent:${otelInstrumentationAlphaVersion}") {
        entry("opentelemetry-agent-for-testing")
        entry("opentelemetry-javaagent-api")
        entry("opentelemetry-javaagent-extension-api")
        entry("opentelemetry-testing-common")
      }
      dependencySet("io.opentelemetry.javaagent.instrumentation:${otelInstrumentationAlphaVersion}") {
        entry('opentelemetry-javaagent-netty-3.8')
        entry('opentelemetry-javaagent-netty-4.0')
        entry('opentelemetry-javaagent-netty-4.1')
        entry('opentelemetry-javaagent-servlet-2.2')
        entry('opentelemetry-javaagent-servlet-3.0')
        entry('opentelemetry-javaagent-servlet-common')
      }
    }

    imports {
      mavenBom("io.grpc:grpc-bom:1.38.0")
      mavenBom("io.micrometer:micrometer-bom:1.7.1")
      mavenBom("io.opentelemetry:opentelemetry-bom-alpha:${otelAlphaVersion}")
      mavenBom("io.opentelemetry:opentelemetry-bom:${otelVersion}")
      mavenBom("org.junit:junit-bom:5.7.2")
    }
  }

  dependencies {
    testImplementation("org.assertj:assertj-core")
    testImplementation("org.mockito:mockito-core")
    testImplementation("org.mockito:mockito-junit-jupiter")
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("org.junit.jupiter:junit-jupiter-params")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
  }

  tasks {
    test {
      useJUnitPlatform()
      reports {
        junitXml.outputPerTestCase = true
      }
    }
  }

  tasks.withType(JavaCompile).configureEach {
    options.deprecation = true
  }
}

