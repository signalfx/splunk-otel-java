apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'

apply from: "$rootDir/gradle/shadow.gradle"

def relocatePackages = ext.relocatePackages

configurations {
    testInstrumentation
    testAgent
}

dependencies {
    compileOnly("io.opentelemetry:opentelemetry-sdk:${versions.opentelemetry}")
    compileOnly("io.opentelemetry.instrumentation:opentelemetry-instrumentation-api:${versions.opentelemetryJavaagentAlpha}")
    compileOnly("io.opentelemetry.javaagent:opentelemetry-javaagent-tooling:${versions.opentelemetryJavaagentAlpha}")
    compileOnly("io.opentelemetry.javaagent:opentelemetry-javaagent-api:${versions.opentelemetryJavaagentAlpha}")
    compileOnly("io.opentelemetry.javaagent:opentelemetry-javaagent-spi:${versions.opentelemetryJavaagentAlpha}")
    compileOnly("net.bytebuddy:byte-buddy:1.10.10")
    annotationProcessor("com.google.auto.service:auto-service:1.0-rc3")
    annotationProcessor("com.google.auto:auto-common:0.8")
    implementation("com.google.auto.service:auto-service:1.0-rc3")
    implementation("com.google.auto:auto-common:0.8")
    compileOnly(project(":bootstrap"))

    // test
    testAgent("io.opentelemetry.javaagent:opentelemetry-agent-for-testing:${versions.opentelemetryJavaagentAlpha}")
    testImplementation("io.opentelemetry.javaagent:opentelemetry-testing-common:${versions.opentelemetryJavaagentAlpha}")
}

shadowJar {
    configurations = [project.configurations.runtimeClasspath, project.configurations.testInstrumentation]
    mergeServiceFiles()

    archiveFileName = 'agent-testing.jar'

    relocatePackages(it)
}

tasks.withType(Test).configureEach {
    jvmArgs "-Dotel.javaagent.debug=true"
    jvmArgs "-javaagent:${configurations.testAgent.files.first().absolutePath}"
    jvmArgs "-Dotel.initializer.jar=${shadowJar.archiveFile.get().asFile.absolutePath}"
    jvmArgs "-Dinternal.testing.disable.global.library.ignores=true"

    dependsOn shadowJar

    // The sources are packaged into the testing jar so we need to make sure to exclude from the test
    // classpath, which automatically inherits them, to ensure our shaded versions are used.
    classpath = classpath.filter {
        if (file("$buildDir/resources/main").equals(it) || file("$buildDir/classes/java/main").equals(it)) {
            return false
        }
        return true
    }
}
