/*
 * Copyright Splunk Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.splunk.opentelemetry.instrumentation.jdbc;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Named.named;

import io.opentelemetry.api.trace.Span;
import io.opentelemetry.api.trace.SpanContext;
import io.opentelemetry.api.trace.propagation.W3CTraceContextPropagator;
import io.opentelemetry.context.Context;
import io.opentelemetry.context.propagation.TextMapGetter;
import io.opentelemetry.instrumentation.testing.internal.AutoCleanupExtension;
import io.opentelemetry.instrumentation.testing.junit.InstrumentationExtension;
import io.opentelemetry.javaagent.bootstrap.CallDepth;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.atomic.AtomicReference;
import org.junit.jupiter.api.extension.RegisterExtension;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

public abstract class AbstractDbContextPropagationTest {
  @RegisterExtension static final AutoCleanupExtension cleanup = AutoCleanupExtension.create();

  protected abstract InstrumentationExtension getTesting();

  private static List<Arguments> contextPropagationArguments() {
    return Arrays.asList(
        // Statement tests
        Arguments.of(
            named(
                "Statement.executeQuery",
                (Action)
                    connection -> {
                      try (Statement statement = connection.createStatement()) {
                        statement.executeQuery("SELECT 1");
                      }
                    })),
        Arguments.of(
            named(
                "Statement.executeUpdate",
                (Action)
                    connection -> {
                      try (Statement statement = connection.createStatement()) {
                        statement.executeUpdate("INSERT INTO test_table VALUES(1)");
                      }
                    })),
        Arguments.of(
            named(
                "Statement.executeUpdate with autoGeneratedKeys",
                (Action)
                    connection -> {
                      try (Statement statement = connection.createStatement()) {
                        statement.executeUpdate(
                            "INSERT INTO test_table VALUES(1)", Statement.NO_GENERATED_KEYS);
                      }
                    })),
        Arguments.of(
            named(
                "Statement.executeUpdate with columnIndexes",
                (Action)
                    connection -> {
                      try (Statement statement = connection.createStatement()) {
                        statement.executeUpdate("INSERT INTO test_table VALUES(1)", new int[] {1});
                      }
                    })),
        Arguments.of(
            named(
                "Statement.executeUpdate with columnNames",
                (Action)
                    connection -> {
                      try (Statement statement = connection.createStatement()) {
                        statement.executeUpdate(
                            "INSERT INTO test_table VALUES(1)", new String[] {"value"});
                      }
                    })),
        Arguments.of(
            named(
                "Statement.execute",
                (Action)
                    connection -> {
                      try (Statement statement = connection.createStatement()) {
                        statement.execute("SELECT 1");
                      }
                    })),
        Arguments.of(
            named(
                "Statement.execute with autoGeneratedKeys",
                (Action)
                    connection -> {
                      try (Statement statement = connection.createStatement()) {
                        statement.execute(
                            "INSERT INTO test_table VALUES(1)", Statement.NO_GENERATED_KEYS);
                      }
                    })),
        Arguments.of(
            named(
                "Statement.execute with columnIndexes",
                (Action)
                    connection -> {
                      try (Statement statement = connection.createStatement()) {
                        statement.execute("INSERT INTO test_table VALUES(1)", new int[] {1});
                      }
                    })),
        Arguments.of(
            named(
                "Statement.execute with columnNames",
                (Action)
                    connection -> {
                      try (Statement statement = connection.createStatement()) {
                        statement.execute(
                            "INSERT INTO test_table VALUES(1)", new String[] {"value"});
                      }
                    })),
        Arguments.of(
            named(
                "Statement.executeBatch",
                (Action)
                    connection -> {
                      try (Statement statement = connection.createStatement()) {
                        statement.addBatch("INSERT INTO test_table VALUES(1)");
                        statement.executeBatch();
                      }
                    })),
        Arguments.of(
            named(
                "Statement.executeLargeBatch",
                (Action)
                    connection -> {
                      try (Statement statement = connection.createStatement()) {
                        statement.addBatch("INSERT INTO test_table VALUES(1)");
                        statement.executeLargeBatch();
                      }
                    })),
        Arguments.of(
            named(
                "Statement.executeLargeUpdate",
                (Action)
                    connection -> {
                      try (Statement statement = connection.createStatement()) {
                        statement.executeLargeUpdate("INSERT INTO test_table VALUES(1)");
                      }
                    })),
        Arguments.of(
            named(
                "Statement.executeLargeUpdate with autoGeneratedKeys",
                (Action)
                    connection -> {
                      try (Statement statement = connection.createStatement()) {
                        statement.executeLargeUpdate(
                            "INSERT INTO test_table VALUES(1)", Statement.NO_GENERATED_KEYS);
                      }
                    })),
        Arguments.of(
            named(
                "Statement.executeLargeUpdate with columnIndexes",
                (Action)
                    connection -> {
                      try (Statement statement = connection.createStatement()) {
                        statement.executeLargeUpdate(
                            "INSERT INTO test_table VALUES(1)", new int[] {1});
                      }
                    })),
        Arguments.of(
            named(
                "Statement.executeLargeUpdate with columnNames",
                (Action)
                    connection -> {
                      try (Statement statement = connection.createStatement()) {
                        statement.executeLargeUpdate(
                            "INSERT INTO test_table VALUES(1)", new String[] {"value"});
                      }
                    })),
        // PreparedStatement tests
        Arguments.of(
            named(
                "PreparedStatement.executeQuery",
                (Action)
                    connection -> {
                      try (PreparedStatement statement = connection.prepareStatement("SELECT 1")) {
                        statement.executeQuery();
                      }
                    })),
        Arguments.of(
            named(
                "PreparedStatement.executeUpdate",
                (Action)
                    connection -> {
                      try (PreparedStatement statement =
                          connection.prepareStatement("INSERT INTO test_table VALUES(1)")) {
                        statement.executeUpdate();
                      }
                    })),
        Arguments.of(
            named(
                "PreparedStatement.execute",
                (Action)
                    connection -> {
                      try (PreparedStatement statement = connection.prepareStatement("SELECT 1")) {
                        statement.execute();
                      }
                    })),
        Arguments.of(
            named(
                "PreparedStatement.executeLargeUpdate",
                (Action)
                    connection -> {
                      try (PreparedStatement statement =
                          connection.prepareStatement("INSERT INTO test_table VALUES(1)")) {
                        statement.executeLargeUpdate();
                      }
                    })),
        Arguments.of(
            named(
                "PreparedStatement.executeBatch",
                (Action)
                    connection -> {
                      try (PreparedStatement statement =
                          connection.prepareStatement("INSERT INTO test_table VALUES(1)")) {
                        statement.addBatch();
                        statement.executeBatch();
                      }
                    })),
        Arguments.of(
            named(
                "PreparedStatement.executeLargeBatch",
                (Action)
                    connection -> {
                      try (PreparedStatement statement =
                          connection.prepareStatement("INSERT INTO test_table VALUES(1)")) {
                        statement.addBatch();
                        statement.executeLargeBatch();
                      }
                    })),
        // CallableStatement tests
        Arguments.of(
            named(
                "CallableStatement.execute",
                (Action)
                    connection -> {
                      try (CallableStatement statement = connection.prepareCall("SELECT 1")) {
                        statement.execute();
                      }
                    })));
  }

  protected abstract Connection newConnection() throws SQLException;

  @ParameterizedTest
  @MethodSource("contextPropagationArguments")
  void contextPropagation(Action action) throws Exception {
    Connection connection = newConnection();
    cleanup.deferCleanup(connection);

    assertNoContext(connection);

    getTesting().runWithSpan("parent", () -> action.accept(connection));

    AtomicReference<SpanContext> jdbcSpan = new AtomicReference<>();
    getTesting()
        .waitAndAssertTraces(
            trace ->
                trace.hasSpansSatisfyingExactly(
                    span -> span.hasName("parent").hasNoParent(),
                    span -> {
                      span.hasParent(trace.getSpan(0));
                      jdbcSpan.set(span.actual().getSpanContext());
                    }));

    assertSameSpan(jdbcSpan.get(), getContext(connection));

    assertNoContext(connection);
  }

  private static void assertSameSpan(SpanContext expected, Context context) {
    SpanContext actual = Span.fromContext(context).getSpanContext();
    assertThat(expected.getTraceId()).isEqualTo(actual.getTraceId());
    assertThat(expected.getSpanId()).isEqualTo(actual.getSpanId());
  }

  private static Context toContext(String traceparent) {
    if (traceparent == null) {
      return Context.root();
    }

    return W3CTraceContextPropagator.getInstance()
        .extract(
            Context.root(),
            traceparent,
            new TextMapGetter<>() {
              public String get(String carrier, String key) {
                if ("traceparent".equals(key)) {
                  return carrier;
                }
                return null;
              }

              @Override
              public Iterable<String> keys(String carrier) {
                return Collections.singleton("traceparent");
              }
            });
  }

  protected abstract String getTraceparent(Connection connection) throws SQLException;

  private Context getContext(Connection connection) throws SQLException {
    return toContext(getTraceparent(connection));
  }

  private void assertNoContext(Connection connection) throws SQLException {
    CallDepth callDepthJdbc = CallDepth.forClass(Statement.class);
    // disable jdbc instrumentation, so it wouldn't create a span for the statement execution
    callDepthJdbc.getAndIncrement();
    try (Statement statement = connection.createStatement()) {
      statement.execute("SELECT 1");
      assertSameSpan(SpanContext.getInvalid(), getContext(connection));
    } finally {
      callDepthJdbc.decrementAndGet();
    }
  }

  @FunctionalInterface
  interface Action {
    void accept(Connection connection) throws Exception;
  }
}
