import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPullImage

plugins {
  id 'war'
  id "com.bmuschko.docker-remote-api"
}

tasks {
  compileJava {
    options.release.set(8)
  }
}

dependencies {
  implementation("javax.servlet:javax.servlet-api:3.0.1")
}

def buildProprietaryTestImagesTask = tasks.create("buildProprietaryTestImages") {
  group = "build"
  description = "Builds all Docker images for the test matrix for proprietary app servers"
}

//Intentionally left without group to remain hidden
def pullProprietaryTestImagesTask = tasks.create("pullProprietaryTestImages")

def proprietaryTargets = [
    "weblogic": [
        [version: ["12.1.3", "12.2.1.4"], vm: ["hotspot"], jdk: ["8"], args: [tagSuffix: "developer"]],
        [version: ["14.1.1.0"], vm: ["hotspot"], jdk: ["8"], args: [tagSuffix: "developer-8"]],
        [version: ["14.1.1.0"], vm: ["hotspot"], jdk: ["11"], args: [tagSuffix: "developer-11"]]
    ],
    "jboss-eap": [
        [version: ["7.1.0"], vm: ["hotspot", "openj9"], jdk: ["8"]],
        [version: ["7.3.0"], vm: ["hotspot", "openj9"], jdk: ["8", "11"]]
    ]
]

createDockerTasks(buildProprietaryTestImagesTask, pullProprietaryTestImagesTask, proprietaryTargets)

def configureImage(Task parentTask, Task parentPullTask, server, dockerfile, version, vm, jdk, Map<String, String> extraArgs) {
  def dockerWorkingDir = new File(project.buildDir, "docker")
  def dockerFileName = "${dockerfile}.dockerfile"

  def prepareTask = tasks.register("${server}ImagePrepare-$version-jdk$jdk-$vm", Copy) {
    def warTask = project.tasks.named("war").get()
    it.dependsOn(warTask)
    it.into(dockerWorkingDir)
    it.from("src/$dockerFileName")
    it.from("src/main/docker/$server")
    it.from(warTask.archiveFile) {
      rename { _ -> "app.war" }
    }
  }

  def vmSuffix = vm == "hotspot" ? "" : "-$vm"
  def fullDockerImageName = "ghcr.io/signalfx/splunk-otel-$server:$version-jdk$jdk$vmSuffix"

  def buildTask = tasks.register("${server}Image-$version-jdk$jdk-$vm", DockerBuildImage) {
    it.dependsOn(prepareTask)
    group = "build"
    description = "Builds Docker image with $server $version on JDK $jdk-$vm"

    it.inputDir.set(dockerWorkingDir)
    it.images.add(fullDockerImageName)
    it.dockerFile.set(new File(dockerWorkingDir, dockerFileName))
    it.buildArgs.set(extraArgs + [jdk: jdk, vm: vm, version: version])
  }

  parentTask.dependsOn(buildTask)

  if(parentPullTask != null){
    def pullTask = tasks.register("${server}ImagePull-$version-jdk$jdk-$vm", DockerPullImage) {
      it.image.set(fullDockerImageName)
    }

    parentPullTask.dependsOn(pullTask)
  }
}

def createDockerTasks(Task parentTask, Task parentPullTask, targets) {
  targets.each { server, matrices ->
    matrices.forEach { entry ->
      def dockerfile = entry["dockerfile"]?.toString() ?: server
      def extraArgs = (entry["args"] ?: [:]) as Map<String, String>

      entry.version.forEach { version ->
        entry.vm.forEach { vm ->
          entry.jdk.forEach { jdk ->
            configureImage(parentTask, parentPullTask, server, dockerfile, version, vm, jdk, extraArgs)
          }
        }
      }
    }
  }
}
