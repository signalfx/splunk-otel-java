import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPullImage

plugins {
  id 'war'
  id "com.bmuschko.docker-remote-api" version "6.6.1"
}

tasks {
  compileJava {
    options.release.set(8)
  }
}

dependencies {
  implementation("javax.servlet:javax.servlet-api:3.0.1")
}

def buildProprietaryTestImagesTask = tasks.create("buildProprietaryTestImages") {
  group = "build"
  description = "Builds all Docker images for the test matrix for proprietary app servers"
}

//Intentially left without group to remain hidden
def pullProprietaryTestImagesTask = tasks.create("pullProprietaryTestImages")

def proprietaryTargets = [
    "weblogic" : [
       "12.1.3" : ["developer"],
       "12.2.1.4" : ["developer"],
       "14.1.1.0" : ["developer-8", "developer-11"]
    ],
    "jboss-eap" : [
        "7.1.0" : ["8"],
        "7.3.0" : ["8", "11"]
    ]
]

createDockerTasks(buildProprietaryTestImagesTask, pullProprietaryTestImagesTask, proprietaryTargets, false)

def buildWindowsTestImagesTask = tasks.create("buildWindowsTestImages") {
  group = "build"
  description = "Builds all Windows Docker images for the test matrix"
}

def windowsTargets = [
    "tomcat" : [
        [version: "7.0.107", majorVersion: "7"]: ["8"],
        [version: "8.5.60", majorVersion: "8"]: ["8", "11"],
        [version: "9.0.40", majorVersion: "9"]: ["8", "11"]
    ],
    "jetty" : [
        [version: "9.4.35", sourceVersion: "9.4.35.v20201120"]: ["8", "11", "15"],
        [version: "10.0.0", sourceVersion: "10.0.0.beta3", classifier: "split"]: ["11", "15"]
    ],
    "payara": [
        "5.2020.6": ["8", "11"]
    ],
    "wildfly" : [
        "13.0.0.Final": ["8"],
        "17.0.1.Final": ["8", "11"],
        "21.0.0.Final": ["8", "11"]
    ],
    "openliberty" : [
        [version: "20.0.0.12", release: "2020-11-11_0736"]: ["8", "11", "15"]
    ]
]

createDockerTasks(buildWindowsTestImagesTask, null, windowsTargets, true)

def createDockerTasks(parentTask, Task parentPullTask, targets, isWindows) {
  def dockerWorkingDir = new File(project.buildDir, "docker")

  targets.forEach { server, data ->
    data.forEach { versionKey, jdks ->
      jdks.forEach { jdk ->
        def versionInfo = versionKey instanceof Map ? versionKey : [version: versionKey.toString()]
        def version = versionInfo["version"]

        def classifier = versionInfo["classifier"] ? "-" + versionInfo["classifier"] : ""
        def dockerFileName = isWindows ? "${server}${classifier}.windows.dockerfile" : "${server}${classifier}.dockerfile"

        def prepareTask = tasks.register("${server}ImagePrepare-$version-jdk$jdk", Copy) {
          def warTask = project.tasks.named("war").get()
          it.dependsOn(warTask)
          it.into(dockerWorkingDir)
          it.from("src/${dockerFileName}")
          it.from("src/main/docker/${server}")
          it.from(warTask.archiveFile) {
            rename { _ -> "app.war" }
          }
        }

        def fullDockerImageName = "ghcr.io/signalfx/splunk-otel-$server:$version-jdk$jdk" + (isWindows ? "-windows" : "")

        def buildTask = tasks.register("${server}Image-$version-jdk$jdk", DockerBuildImage) {
          it.dependsOn(prepareTask)
          group = "build"
          description = "Builds Docker image with $server $version on JDK $jdk"

          it.inputDir.set(dockerWorkingDir)
          it.images.add(fullDockerImageName)

          it.buildArgs.set(["jdk": jdk] + versionInfo)

          it.dockerFile.set(new File(dockerWorkingDir, dockerFileName))
        }

        parentTask.dependsOn(buildTask)

        if(parentPullTask != null){
          def pullTask = tasks.register("${server}ImagePull-$version-jdk$jdk", DockerPullImage) {
            it.image.set(fullDockerImageName)
          }

          parentPullTask.dependsOn(pullTask)
        }
      }
    }
  }
}
