plugins {
  id 'java'
  id "org.gradle.test-retry" version "1.2.1"
}

def dockerJavaVersion = "3.2.7"

dependencies {
  testImplementation("org.testcontainers:testcontainers:1.15.2")
  testImplementation("com.fasterxml.jackson.core:jackson-databind:2.12.2")
  testImplementation("com.google.protobuf:protobuf-java-util:3.12.4")
  testImplementation("com.squareup.okhttp3:okhttp:3.12.12")
  testImplementation("io.opentelemetry:opentelemetry-proto:${versions.opentelemetryAlpha}")
  testImplementation("io.opentelemetry:opentelemetry-api:${versions.opentelemetry}")

  testImplementation("ch.qos.logback:logback-classic:1.2.3")

  testImplementation("com.github.docker-java:docker-java-core:$dockerJavaVersion")
  testImplementation("com.github.docker-java:docker-java-transport-httpclient5:$dockerJavaVersion")
}

tasks.test {
  useJUnitPlatform()
  maxParallelForks = 2

  testLogging.showStandardStreams = true

  retry {
    // You can see tests that were retried by this mechanism in the collected test reports and build scans.
    maxRetries = System.getenv("CI") != null ? 5 : 0
  }

  reports {
    junitXml.outputPerTestCase = true
  }

  def suites = [
      "glassfish": ["**/GlassFishSmokeTest.*"],
      "jboss"    : ["**/JBossEapSmokeTest.*"],
      "jetty"    : ["**/JettySmokeTest.*"],
      "liberty"  : ["**/LibertySmokeTest.*"],
      "tomcat"   : ["**/TomcatSmokeTest.*"],
      "tomee"    : ["**/TomeeSmokeTest.*"],
      "weblogic" : ["**/WebLogicSmokeTest.*"],
      "wildfly"  : ["**/WildflySmokeTest.*"]
  ]

  def suite = findProperty('smokeTestSuite')
  if (suite != null) {
    if ('other' == suite) {
      suites.values().each {
        exclude it
      }
    } else if (suites.containsKey(suite)) {
      include suites.get(suite)
    } else {
      throw new GradleException('Unknown smoke test suite: ' + suite)
    }
  }

  def shadowTask = project(":agent").tasks.named("shadowJar").get()
  inputs.files(layout.files(shadowTask))

  doFirst {
    jvmArgs("-Dio.opentelemetry.smoketest.agent.shadowJar.path=${shadowTask.archiveFile.get()}")
  }
}